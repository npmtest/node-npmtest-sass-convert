{"/home/travis/build/npmtest/node-npmtest-sass-convert/test.js":"/* istanbul instrument in package npmtest_sass_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-convert/lib.npmtest_sass_convert.js":"/* istanbul instrument in package npmtest_sass_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sass_convert = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sass_convert = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-convert/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sass-convert && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sass_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sass_convert\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sass_convert.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sass_convert.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sass_convert.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sass_convert.__dirname + '/lib.npmtest_sass_convert.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-convert/node_modules/sass-convert/index.js":"'use strict';\n\nmodule.exports = require('./dist');\n","/home/travis/build/npmtest/node-npmtest-sass-convert/node_modules/sass-convert/dist/index.js":"'use strict';\n\n// istanbul ignore next\n\nvar _createDecoratedClass = (function () { function defineProperties(target, descriptors, initializers) { for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } if (descriptor.initializer !== undefined) { initializers[key] = descriptor; continue; } } Object.defineProperty(target, key, descriptor); } } return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) { if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers); if (staticProps) defineProperties(Constructor, staticProps, staticInitializers); return Constructor; }; })();\n\n// istanbul ignore next\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n// istanbul ignore next\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// istanbul ignore next\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n// istanbul ignore next\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _child_process = require('child_process');\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _semverRegex = require('semver-regex');\n\nvar _semverRegex2 = _interopRequireDefault(_semverRegex);\n\nvar _dargs = require('dargs');\n\nvar _dargs2 = _interopRequireDefault(_dargs);\n\nvar _through2 = require('through2');\n\nvar _through22 = _interopRequireDefault(_through2);\n\nvar _concatStream = require('concat-stream');\n\nvar _concatStream2 = _interopRequireDefault(_concatStream);\n\nvar _which = require('which');\n\nvar _which2 = _interopRequireDefault(_which);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _endsWith = require('ends-with');\n\nvar _endsWith2 = _interopRequireDefault(_endsWith);\n\nvar _memoizeDecorator = require('memoize-decorator');\n\nvar _memoizeDecorator2 = _interopRequireDefault(_memoizeDecorator);\n\nvar _es6Promise = require('es6-promise');\n\nvar _es6Denodeify = require('es6-denodeify');\n\nvar _es6Denodeify2 = _interopRequireDefault(_es6Denodeify);\n\nvar promiseify = (0, _es6Denodeify2['default'])(_es6Promise.Promise);\nvar whichp = promiseify(_which2['default']);\n\nvar BIN = 'sass-convert';\nvar MINVERS = '>=3.4.5';\n\n/**\n * Execute command in a child process.\n *\n * @see {@link http://nodejs.org/api/child_process.html}\n * @param {String} command\n * @param {Array} args\n * @return {Promise}\n */\nfunction execp(command) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var childProcess = undefined;\n\n  return new _es6Promise.Promise(function (resolve, reject) {\n    args.push(function (err, stdout, stderr) {\n      if (err) {\n        (0, _objectAssign2['default'])(err, {\n          message: err.message + ' `' + command + '` exited with error code ' + err.code,\n          stdout: stdout,\n          stderr: stderr\n        });\n\n        reject(err);\n      } else {\n        resolve({ childProcess: childProcess, stdout: stdout, stderr: stderr });\n      }\n    });\n\n    childProcess = _child_process.exec.apply(undefined, [command].concat(args));\n  });\n}\n\n/**\n * Custom error for binary check.\n *\n * @param {String} message\n */\n\nvar BinaryError = (function (_Error) {\n  _inherits(BinaryError, _Error);\n\n  function BinaryError(message) {\n    _classCallCheck(this, BinaryError);\n\n    _get(Object.getPrototypeOf(BinaryError.prototype), 'constructor', this).call(this, message);\n    // http://bit.ly/1yMzARU\n    this.message = message || 'Could not find any executable for \"' + BIN + '\". Operation Aborted.';\n  }\n\n  /**\n   * Custom error for version check.\n   *\n   * @param {String} message\n   */\n\n  _createClass(BinaryError, [{\n    key: 'name',\n    get: function get() {\n      return 'BinaryError';\n    }\n  }]);\n\n  return BinaryError;\n})(Error);\n\nvar VersionError = (function (_Error2) {\n  _inherits(VersionError, _Error2);\n\n  function VersionError(message) {\n    _classCallCheck(this, VersionError);\n\n    _get(Object.getPrototypeOf(VersionError.prototype), 'constructor', this).call(this, message);\n    // http://bit.ly/1yMzARU\n    this.message = message || 'Invalid \"' + BIN + '\" version, must be ' + MINVERS;\n  }\n\n  /**\n   * Check whether passed binary (Gem) is in $PATH,\n   * and check its version.\n   *\n   * @param {String} bin\n   * @return {Promise}\n   */\n\n  _createClass(VersionError, [{\n    key: 'name',\n    get: function get() {\n      return 'VersionError';\n    }\n  }]);\n\n  return VersionError;\n})(Error);\n\nfunction checkBinary(bin) {\n\n  /**\n   * Check for binary min-version.\n   *\n   * @param {String} str\n   * @return {Boolean}\n   */\n  function checkVersion(str) {\n    var version = str.match((0, _semverRegex2['default'])())[0];\n    return _semver2['default'].satisfies(version, MINVERS);\n  }\n\n  /**\n   * Check for global binary and version.\n   *\n   * @return {Promise}\n   */\n  function checkGlobal() {\n    return whichp(bin).then(function () {\n      return execp(bin + ' -v');\n    }, function () {\n      throw new BinaryError();\n    }).then(function (res) {\n      if (!checkVersion(res.stdout)) {\n        throw new VersionError();\n      }\n    });\n  }\n\n  /**\n   * Check for bundled binary and version.\n   *\n   * @return {Promise}\n   */\n  function checkBundle() {\n    return whichp('bundle').then(function () {\n      return execp('bundle exec ' + bin + ' -v');\n    }).then(function (res) {\n      if (!checkVersion(res.stdout)) {\n        throw new VersionError();\n      }\n      return { bundler: true };\n    }, function (err) {\n      throw new BinaryError();\n    });\n  }\n\n  return checkBundle()['catch'](checkGlobal);\n}\n\n/**\n * Run binary checks only once.\n *\n * @return {Promise}\n */\nfunction checkBinaryCache() {\n  if (!('promise' in checkBinaryCache)) {\n    checkBinaryCache.promise = checkBinary(BIN);\n  }\n\n  return checkBinaryCache.promise;\n}\n\nvar Converter = (function () {\n  function Converter() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Converter);\n\n    this.options = options;\n    this.bundler = false;\n  }\n\n  /**\n   * Format the `sass-convert` command string.\n   *\n   * @return {Object}\n   */\n\n  _createDecoratedClass(Converter, [{\n    key: 'isTransformable',\n\n    /**\n     * Returns whether file is eligible for convertion.\n     *\n     * @param {Object} file - Vinyl file Object\n     * @return {Boolean}\n     */\n    value: function isTransformable(file) {\n      var ext = _path2['default'].extname(file.path);\n      return (file.isBuffer() || file.isStream()) && (0, _endsWith2['default'])(ext, this.options.from);\n    }\n\n    /**\n     * Convert file Buffer through `sass-convert` binary.\n     *\n     * @param {Buffer} file - Vinyl file\n     * @param {String} enc - encoding\n     * @return {Promise}\n     */\n  }, {\n    key: 'convertFile',\n    value: function convertFile(file, enc) {\n      var _command = this.command;\n      var cmd = _command.cmd;\n      var args = _command.args;\n\n      var child = (0, _child_process.spawn)(cmd, args);\n      var result = {};\n\n      file.pipe(child.stdin);\n\n      child.stdout.pipe((0, _concatStream2['default'])(function (data) {\n        result.stdout = data;\n      }));\n\n      child.stderr.pipe((0, _concatStream2['default'])(function (data) {\n        result.stderr = data;\n      }));\n\n      return new _es6Promise.Promise(function (resolve, reject) {\n        child.on('error', reject);\n\n        child.on('close', function (code, signal) {\n          if (code !== 0) {\n            var message = '`' + cmd + ' ' + args.join(' ') + '` failed with code ' + code;\n            var stderr = Buffer.isBuffer(result.stderr) ? result.stderr.toString() : '';\n\n            reject({ code: code, message: message, stderr: stderr });\n          } else {\n            resolve(result);\n          }\n        });\n      });\n    }\n\n    /**\n     * Change file extension to `options.from`.\n     *\n     * @param {Object} file - Vinyl file\n     */\n  }, {\n    key: 'rename',\n    value: function rename(file) {\n      if (!this.options.rename) {\n        return;\n      }\n\n      var ext = _path2['default'].extname(file.path);\n      file.path = file.path.replace(ext, '.' + this.options.to);\n    }\n\n    /**\n     * Returns a transform stream meant to be piped to a stream\n     * of Sass, SCSS or CSS files. Apply convertion if matches.\n     *\n     * @return {Object} - Stream\n     */\n  }, {\n    key: 'stream',\n    value: function stream() {\n      var self = this;\n\n      return _through22['default'].obj(function (file, enc, cb) {\n        var stream = this;\n\n        if (!self.isTransformable(file)) {\n          // Pass-through.\n          return cb(null, file);\n        }\n\n        // Matches `from`, let's convert it.\n        checkBinaryCache().then(function (res) {\n          self.bundler = res ? res.bundler : false;\n\n          return self.convertFile(file, enc);\n        }).then(function (result) {\n          file.contents = new Buffer(result.stdout);\n          self.rename(file);\n\n          cb(null, file);\n        }, function (err) {\n          stream.emit('error', err);\n\n          if (self.options.force) {\n            // Continue stream chain,\n            // but don't pass unconverted chunks.\n            return cb();\n          }\n\n          // Stop stream chain.\n          stream.destroy();\n          stream.emit('end');\n        });\n      });\n    }\n  }, {\n    key: 'command',\n    decorators: [_memoizeDecorator2['default']],\n    get: function get() {\n      var cmd = (this.bundler ? 'bundle exec ' : '') + 'sass-convert';\n\n      // Add required args.\n      var options = (0, _objectAssign2['default'])({}, this.options, {\n        'stdin': true,\n        'no-cache': true\n      });\n\n      // Filter unwanted or erroneous args.\n      var includes = ['from', 'to', 'dasherize', 'indent', 'old', 'default-encoding', 'unix-newlines', 'stdin', 'no-cache'];\n\n      var args = (0, _dargs2['default'])(options, { includes: includes });\n\n      return { cmd: cmd, args: args };\n    }\n  }]);\n\n  return Converter;\n})();\n\nmodule.exports = function (options) {\n  return new Converter(options).stream();\n};\n\n// Expose custom error constructors.\nmodule.exports.BinaryError = BinaryError;\nmodule.exports.VersionError = VersionError;"}